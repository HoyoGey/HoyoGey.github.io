// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è –º–µ—Ç–æ–¥–∞ replaceAll
if (!String.prototype.replaceAll) {
    String.prototype.replaceAll = function(str, newStr) {
        return this.split(str).join(newStr);
    };
}

// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Array.prototype.map
if (!Array.prototype.map) {
    Array.prototype.map = function(callback) {
        var arr = [];
        for (var i = 0; i < this.length; i++) {
            arr.push(callback(this[i], i, this));
        }
        return arr;
    };
}

// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è Array.prototype.filter
if (!Array.prototype.filter) {
    Array.prototype.filter = function(callback) {
        var arr = [];
        for (var i = 0; i < this.length; i++) {
            if (callback(this[i], i, this)) {
                arr.push(this[i]);
            }
        }
        return arr;
    };
}

function addMessage(text, isUser = false, hasExplanation = false) {
    const messagesDiv = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
    
    const avatar = document.createElement('div');
    avatar.className = 'avatar';
    avatar.textContent = isUser ? 'üë§' : 'ü§ñ';
    
    const contentWrapper = document.createElement('div');
    contentWrapper.className = 'content-wrapper';
    
    const content = document.createElement('div');
    content.className = 'content';
    content.innerHTML = text;
    
    contentWrapper.appendChild(content);
    
    if (hasExplanation && !isUser) {
        const explainButton = document.createElement('button');
        explainButton.className = 'explain-btn';
        explainButton.textContent = '–û–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ';
        explainButton.onclick = showExplanation;
        contentWrapper.appendChild(explainButton);
    }
    
    messageDiv.appendChild(avatar);
    messageDiv.appendChild(contentWrapper);
    messagesDiv.appendChild(messageDiv);
    
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function explainSolution(solution) {
    let explanation = '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º:\n\n';
    
    if (solution.includes('\\cdot')) {
        explanation += '1. –ó–¥–µ—Å—å –º—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:\n';
        explanation += '   (u¬∑v)‚Ä≤ = u‚Ä≤¬∑v + u¬∑v‚Ä≤\n\n';
    }
    
    if (solution.includes('\\over')) {
        explanation += '1. –ó–¥–µ—Å—å –º—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ —á–∞—Å—Ç–Ω–æ–≥–æ:\n';
        explanation += '   (u/v)‚Ä≤ = (u‚Ä≤¬∑v - u¬∑v‚Ä≤)/v¬≤\n\n';
    }
    
    if (solution.includes('^')) {
        explanation += '2. –î–ª—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ x^n:\n';
        explanation += '   (x^n)‚Ä≤ = n¬∑x^(n-1)\n\n';
    }
    
    addMessage(explanation, false);
}

function parseExpression(expr) {
    expr = expr.replace(/\s+/g, '');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–∞–≥–∞–µ–º—ã–µ
    const terms = expr.split(/([+-])/g).filter(term => term);
    if (terms.length > 1) {
        return {
            type: 'sum',
            terms: terms.reduce((acc, curr, i) => {
                if (curr === '+' || curr === '-') {
                    acc.operators.push(curr);
                } else {
                    acc.terms.push(parseSimpleTerm(curr));
                }
                return acc;
            }, { terms: [], operators: [] })
        };
    }
    
    if (expr.includes('*')) {
        const [left, right] = expr.split('*');
        return {
            type: 'product',
            left: parseSimpleTerm(left),
            right: parseSimpleTerm(right)
        };
    }
    
    if (expr.includes('/')) {
        const [num, den] = expr.split('/');
        return {
            type: 'quotient',
            numerator: parseSimpleTerm(num.replace(/[()]/g, '')),
            denominator: parseSimpleTerm(den.replace(/[()]/g, ''))
        };
    }
    
    return parseSimpleTerm(expr);
}

function parseSimpleTerm(term) {
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    const isNegative = term.startsWith('-');
    if (isNegative) {
        term = term.substring(1);
    }
    
    const match = term.match(/^(\d*)(x|y)?(\^(\d+))?$/);
    if (!match) return null;
    
    const [_, coef, variable, __, power] = match;
    let coefficient = coef ? parseInt(coef) : 1;
    if (isNegative) coefficient = -coefficient;
    
    return {
        type: 'term',
        coefficient: coefficient,
        variable: variable || '',
        power: power ? parseInt(power) : (variable ? 1 : 0)
    };
}

function formatMathExpression(expr) {
    return expr
        .replace(/\*/g, '\\cdot ')
        .replace(/\^(\d+)/g, '^{$1}');
}

function formatDerivative(expr, derivative) {
    let formatted = expr;
    let formattedDerivative = derivative;

    // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–±–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
    if (expr.includes('/')) {
        let [num, den] = expr.split('/');
        formatted = `\\frac{${num}}{${den}}`;
    }

    // –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–±–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
    if (derivative.includes('/')) {
        let parts = derivative.split('/');
        if (parts.length === 2) {
            formattedDerivative = `\\frac{${parts[0]}}{${parts[1]}}`;
        }
    }

    return `\\left(${formatted}\\right)' = ${formattedDerivative}`;
}

function addSolution(text) {
    const derivative = calculateDerivative(text);
    const formattedResult = formatDerivative(text, derivative);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    const plainText = `(${text})' = ${derivative}`;
    
    return {
        text: `<div class="math-container">\\[${formattedResult}\\]</div><div class="text-answer">–û—Ç–≤–µ—Ç: ${plainText}</div>`,
        solution: derivative
    };
}

function calculateDerivative(expression) {
    if (!expression) return '';
    
    expression = expression.replace(/\s+/g, '');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä–æ–±—å
    if (expression.includes('/')) {
        const [numerator, denominator] = expression.split('/');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–∏—Ç–µ–ª—è
        let numDeriv = '';
        if (numerator.includes('+')) {
            const [firstTerm, secondTerm] = numerator.split('+');
            if (firstTerm.includes('^')) {
                const [base, power] = firstTerm.split('^');
                const coef = parseInt(base) || 1;
                const n = parseInt(power);
                numDeriv = `${coef * n}x^{${n-1}}+1`;
            }
        } else {
            numDeriv = calculateDerivative(numerator);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è
        let denDeriv = '';
        if (denominator.includes('^')) {
            const [base, power] = denominator.split('^');
            const coef = parseInt(base.replace('x', '')) || 1;
            const n = parseInt(power);
            denDeriv = `${coef * n}x^{${n-1}}`;
        } else {
            denDeriv = calculateDerivative(denominator);
        }
        
        return `(${numDeriv}\\cdot ${denominator}-${numerator}\\cdot ${denDeriv})/(${denominator})^2`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    if (expression.includes('*')) {
        const [first, second] = expression.split('*');
        
        let firstDeriv = '';
        if (first.includes('^')) {
            const [base, power] = first.split('^');
            const coef = parseInt(base) || 1;
            const n = parseInt(power);
            firstDeriv = `${coef * n}x^{${n-1}}`;
        } else {
            firstDeriv = calculateDerivative(first);
        }
        
        let secondDeriv = '';
        if (second.includes('^')) {
            const [base, power] = second.split('^');
            const coef = parseInt(base.replace('y', '')) || 1;
            const n = parseInt(power);
            secondDeriv = `${coef * n}y^{${n-1}}`;
        } else {
            secondDeriv = calculateDerivative(second);
        }
        
        return `${firstDeriv}\\cdot ${second}+${first}\\cdot ${secondDeriv}`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–µ–ø–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (expression.includes('^')) {
        const [base, power] = expression.split('^');
        const n = parseInt(power);
        
        if (base.includes('x')) {
            const coef = parseInt(base.replace('x', '')) || 1;
            return `${coef * n}x^{${n-1}}`;
        }
        if (base.includes('y')) {
            const coef = parseInt(base.replace('y', '')) || 1;
            return `${coef * n}y^{${n-1}}`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–º–º—É
    if (expression.includes('+')) {
        const terms = expression.split('+');
        return terms.map(term => calculateDerivative(term)).join('+');
    }

    // –ë–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    if (expression === 'x') return '1';
    if (expression === 'y') return '1';
    if (/^\d+x$/.test(expression)) return expression.replace('x', '');
    if (!isNaN(expression)) return '0';
    
    return expression;
}

function explainDerivativeSolution(expression, derivative) {
    if (!expression || !derivative) {
        return '<div class="solution-explanation"><p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.</p></div>';
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    const terms = expression.split(/([+\-])/g).filter(term => term.trim());
    
    let explanation = `
        <div class="solution-explanation">
            <h3>–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π:</h3>
            
            <div class="initial-expression">
                <p><strong>–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:</strong></p>
                <p class="math">${formatMathExpression(expression)}</p>
            </div>

            <div class="solution-steps">
                <p><strong>–†–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º:</strong></p>
    `;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–ª–µ–Ω –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    terms.forEach((term, index) => {
        if (term === '+' || term === '-') return;

        explanation += `<div class="step">
            <p><strong>–®–∞–≥ ${Math.ceil((index + 1) / 2)}:</strong> –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —á–ª–µ–Ω–∞ ${formatMathExpression(term)}</p>`;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–ª–µ–Ω–∞ –∏ –æ–±—ä—è—Å–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
        if (term.includes('^')) {
            const [base, power] = term.split('^');
            explanation += `
                <p>–ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:</p>
                <p>–ï—Å–ª–∏ \\(f(x) = x^n\\), —Ç–æ \\(f'(x) = n \\cdot x^{n-1}\\)</p>
                <p>–í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ:</p>
                <ul>
                    <li>–°—Ç–µ–ø–µ–Ω—å (n) = ${power}</li>
                    <li>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ x: ${base.includes('*') ? base.split('*')[0] : '1'}</li>
                </ul>
            `;
        } else if (term.includes('x')) {
            explanation += `
                <p>–≠—Ç–æ –ª–∏–Ω–µ–π–Ω—ã–π —á–ª–µ–Ω. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è x —Ä–∞–≤–Ω–∞ 1.</p>
                <p>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ x —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.</p>
            `;
        } else {
            explanation += `
                <p>–≠—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞–≤–Ω–∞ 0.</p>
            `;
        }

        explanation += `</div>`;
    });

    explanation += `
            </div>

            <div class="final-result">
                <p><strong>–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è:</strong></p>
                <p class="math">${formatMathExpression(derivative)}</p>
            </div>

            <div class="explanation-notes">
                <p><strong>–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</strong></p>
                <ul>
                    <li>–ü—Ä–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º</li>
                    <li>–°—Ç–µ–ø–µ–Ω—å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1</li>
                    <li>–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å—É–º–º—ã —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö</li>
                </ul>
            </div>
        </div>
    `;

    return explanation;
}

function showExplanation() {
    try {
        const input = document.getElementById('expression').value;
        if (!input.trim()) {
            document.getElementById('explanation').innerHTML = 
                '<div class="solution-explanation"><p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.</p></div>';
            return;
        }

        const derivative = calculateDerivative(input);
        const explanation = explainDerivativeSolution(input, derivative);
        
        const explanationDiv = document.getElementById('explanation');
        explanationDiv.innerHTML = explanation;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ MathJax
        MathJax.typesetPromise([explanationDiv]).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ MathJax:', err);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:', error);
        document.getElementById('explanation').innerHTML = 
            '<div class="solution-explanation"><p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.</p></div>';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
function handleCalculate() {
    const input = document.getElementById('expression');
    if (!input) return;
    
    const text = input.value.trim();
    if (!text) return;
    
    const solution = addSolution(text);
    addMessage(text, true);
    addMessage(solution.text, false, true);
    input.value = '';
    
    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É–ª—ã
    if (window.MathJax?.typesetPromise) {
        window.MathJax.typesetPromise();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∞–≤–∏—à–∏ Enter
document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById('expression');
    const calculateButton = document.getElementById('calculate');
    
    if (input) {
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleCalculate();
                e.preventDefault();
            }
        });
    }
    
    if (calculateButton) {
        calculateButton.addEventListener('click', handleCalculate);
    }
});
